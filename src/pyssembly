#!/usr/bin/python3
import sys, os
import argparse
from comp import Compiler, CompilationError
from vm import VM
VERSION = "0.1.0"

def check_dir(dir_path: str):
    # check if dir is formatted correctly
    if not os.path.isdir(dir_path):
        return False
    
    must_files = []
    must_files.append(os.path.join(dir_path, 'boot', 'kernel.bin'))
    must_files.append(os.path.join(dir_path, 'boot', 'pool.bin'))
    must_files.append(os.path.join(dir_path, 'boot', 'arrays.bin'))
    must_files.append(os.path.join(dir_path, 'boot', 'instructions.bin'))
    must_files.append(os.path.join(dir_path, 'rootfs'))
    must_files.append(os.path.join(dir_path, 'rootfs', 'home'))
    must_files.append(os.path.join(dir_path, 'rootfs', '.bitmaps'))

    for file in must_files:
        if not os.path.exists(file):
            return file
        
    return True

def run_in_dir(dir_path: str, debug: bool, slow: bool):
    if not check_dir(dir_path) == True:
        print("pyssembly: error: non-existend or invalid root directory",dir_path,('\nmissing file or directory ' + str(check_dir(dir_path))))
        sys.exit(1)
    
    vm = VM()
    vm.configure(dir_path, debug, slow)
    vm.run()

def compile_asm(inpath: str, outdir: str, debug: bool):
    if not os.path.exists(inpath):
        print("File \""+inpath+"\" not found")
        sys.exit(1)
    code = ""
    with open(inpath, 'r') as f:
        code = f.read()

    if not outdir:
        outdir = os.path.splitext(os.path.basename(args.input))[0]
    
    if not os.path.isdir(outdir):
        os.mkdir(outdir)

    binpath = os.path.join(outdir, 'boot', 'kernel.bin')
    poolpath = os.path.join(outdir, 'boot', 'pool.bin')
    ptr_poolpath = os.path.join(outdir, 'boot', 'arrays.bin')
    instructs_path = os.path.join(outdir, 'boot', 'instructions.bin')

    if not os.path.isdir(os.path.join(outdir, 'rootfs')):
        os.mkdir(os.path.join(outdir, 'rootfs'))

    try:
        compiler = Compiler(binpath, poolpath, ptr_poolpath, instructs_path)
        compiler.code = code
        compiler.compile()
        sys.exit(0)

    except CompilationError as e:
        print(e)
        sys.exit(1)

def compile_image(inpath: str, outpath: str, debug: bool):
    if not os.path.exists(inpath):
        print("File \""+inpath+"\" not found")
        sys.exit(1) 
    
    if not outpath:
        outpath = os.path.splitext(inpath)[0] + '.bin'

    # outdir = os.path.splitext(os.path.basename(outpath))[0]
    # if not os.path.isdir(outdir):
    #     os.makedirs(outdir)
    
    try:
        Compiler.compile_image(inpath, outpath)
    except CompilationError as e:
        print(e)
        sys.exit(1)

if __name__ == "__main__":

    if '--version' in sys.argv:
        print(f"Pyssembly version {VERSION} by Sjoerd Vermeulen")
        sys.exit(0)

    parser = argparse.ArgumentParser('pyssembly', description='python assembly/vm emulator',
                                     usage='%(prog)s [file]\n -h/--help: show help message')

    parser.add_argument('-r', '--rootdir', type=str, default=os.getcwd(), required=False,
                        help='root directory for the vm')

    parser.add_argument('-o', '--output', dest='outfile', default=False,
                        action='store', help='specify the output file')

    parser.add_argument('-s', '--slow', action='store_true',
                        default=False, help='slow mode')

    parser.add_argument('-c', '--compile', dest="input", action="store", default=False,
                        help="compile an assembly file to binary")

    parser.add_argument('-i', '--image', dest="image", action="store", default=False,
                        help="compile an image to binary 8bit pixel map")
    # parser.add_argument('-b', '--binary', dest="binfile", action="store",
    #                     help="execute a binary file")

    parser.add_argument('-d', '--debug', action='store_true', default=False,
                        help="displays extra debugging information when running a file")

    parser.add_argument('--version', action='store_true',
                        help='print version info')

    args = parser.parse_args()

    if args.input:
        if args.image:
            print("pyssembly: error: cannot compile an assembly file and an image at the same time")
            sys.exit(1)
        # compile
        compile_asm(args.input, args.outfile, args.debug)
    
    elif args.image:
        # compile image
        compile_image(args.image, args.outfile, args.debug)

    else:
        # run
        run_in_dir(args.rootdir, args.debug, args.slow)
